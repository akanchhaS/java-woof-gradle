# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle CI for PR checks

on:
  pull_request:
    
jobs:
  archive-build-artifacts:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

    - uses: actions/setup-node@v2
      with:
         node-version: '14'
    - run: npm install snyk -g # install snyk
    - run: snyk -v
    - run: snyk auth ${{ secrets.SNYK_TOKEN }} # snyk authentication using GH secrets
    
    - name: Run Snyk test on current branch $GITHUB_HEAD_REF
      run: snyk test --all-projects > current_branch.json || true
      
    - name: Checkout target branch
      run: |
           git stash 
           git fetch origin $GITHUB_BASE_REF
           git checkout $GITHUB_BASE_REF
           ls -al 
           git rev-parse --abbrev-ref HEAD
           
    - name: Run Snyk chek on target branch $GITHUB_BASE_REF
      run:  snyk test --json --all-projects  > dest_branch.json || true #run snyk test on destination branch
      
    - name: Install jq
      run: |
       apt-get update
       apt-get -y install jq
      
    - name: Run calculations
      run: |
          cat dest_branch.json | jq -r '.vulnerabilities[] | .id + " " + .moduleName' | sort | uniq > db.txt
          cat current_branch.json | jq -r '.vulnerabilities[] | .id + " " + .moduleName' | sort | uniq > cb.txt
          echo "calculating value"
          diff --side-by-side --suppress-common-lines db.txt cb.txt || true
          diffcount=$((diff --side-by-side --suppress-common-lines db.txt cb.txt || true) | wc -l)
          echo "dc = $diffcount"
          newIssuecount=$((diff --side-by-side --suppress-common-lines db.txt cb.txt || true) | grep '>' | wc -l)
          echo "newIssuecount = $newIssuecount" 
          fixIssueCount=$((diff --side-by-side --suppress-common-lines cb.txt db.txt || true) | grep '<' | wc -l)
          echo "fixIssueCount = $fixIssueCount" 
          if [[ "$diffcount" -eq 0  ]] ; then echo " No new Vulnerabilities in the PR" ; exit 0 ;fi
          if [[ "$diffcount" -gt 0  ]] ; 
             then 
                   if [[ "$fixIssueCount" -gt 0 ]] ;
                         then 
                          echo "FYI the build has "$fixIssueCount" less Vulenrabilities compared to $CI_MERGE_REQUEST_TARGET_BRANCH_NAME in the PR. VulnID and package name below";
                          diff --side-by-side --suppress-common-lines db.txt cb.txt | grep '<' ; exit 0; 
                      elif [[ "$newIssuecount" -gt 0 ]] ;
                         echo "Failing the build as "$newIssuecount" New Vulenrabilities have been detected in the PR. VulnID and package name below";  
                         diff --new-line-format='| %L' db.txt cb.txt | grep '|' ; exit 1; 
                     fi          
             fi 
